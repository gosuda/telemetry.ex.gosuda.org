// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: likes.sql

package database

import (
	"context"
)

const likeCountInsert = `-- name: LikeCountInsert :exec
INSERT INTO like_counts (id, url_id, count, updated_at)
VALUES (?, ?, 1, ?)
`

type LikeCountInsertParams struct {
	ID        int64 `json:"id"`
	UrlID     int64 `json:"url_id"`
	UpdatedAt int64 `json:"updated_at"`
}

func (q *Queries) LikeCountInsert(ctx context.Context, arg LikeCountInsertParams) error {
	_, err := q.db.ExecContext(ctx, likeCountInsert, arg.ID, arg.UrlID, arg.UpdatedAt)
	return err
}

const likeCountLookup = `-- name: LikeCountLookup :one
SELECT id, url_id, count, updated_at FROM like_counts WHERE url_id = ?
`

func (q *Queries) LikeCountLookup(ctx context.Context, urlID int64) (LikeCount, error) {
	row := q.db.QueryRowContext(ctx, likeCountLookup, urlID)
	var i LikeCount
	err := row.Scan(
		&i.ID,
		&i.UrlID,
		&i.Count,
		&i.UpdatedAt,
	)
	return i, err
}

const likeCountUpdate = `-- name: LikeCountUpdate :exec
UPDATE like_counts SET count = count + 1, updated_at = ? WHERE url_id = ?
`

type LikeCountUpdateParams struct {
	UpdatedAt int64 `json:"updated_at"`
	UrlID     int64 `json:"url_id"`
}

func (q *Queries) LikeCountUpdate(ctx context.Context, arg LikeCountUpdateParams) error {
	_, err := q.db.ExecContext(ctx, likeCountUpdate, arg.UpdatedAt, arg.UrlID)
	return err
}

const likeInsert = `-- name: LikeInsert :exec
INSERT INTO likes (id, url_id, client_id, created_at)
VALUES (?, ?, ?, ?)
`

type LikeInsertParams struct {
	ID        int64 `json:"id"`
	UrlID     int64 `json:"url_id"`
	ClientID  int64 `json:"client_id"`
	CreatedAt int64 `json:"created_at"`
}

func (q *Queries) LikeInsert(ctx context.Context, arg LikeInsertParams) error {
	_, err := q.db.ExecContext(ctx, likeInsert,
		arg.ID,
		arg.UrlID,
		arg.ClientID,
		arg.CreatedAt,
	)
	return err
}
