// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: bulk_counts.sql

package database

import (
	"context"
	"strings"
)

const bulkCountsByUrls = `-- name: BulkCountsByUrls :many
SELECT
  u.url AS url,
  COALESCE(vc.count, 0) AS view_count,
  COALESCE(lc.count, 0) AS like_count
FROM urls u
LEFT JOIN view_counts vc ON vc.url_id = u.id
LEFT JOIN like_counts lc ON lc.url_id = u.id
WHERE u.url IN (/*SLICE:urls*/?)
`

type BulkCountsByUrlsRow struct {
	Url       string `json:"url"`
	ViewCount int64  `json:"view_count"`
	LikeCount int64  `json:"like_count"`
}

func (q *Queries) BulkCountsByUrls(ctx context.Context, urls []string) ([]BulkCountsByUrlsRow, error) {
	query := bulkCountsByUrls
	var queryParams []interface{}
	if len(urls) > 0 {
		for _, v := range urls {
			queryParams = append(queryParams, v)
		}
		query = strings.Replace(query, "/*SLICE:urls*/?", strings.Repeat(",?", len(urls))[1:], 1)
	} else {
		query = strings.Replace(query, "/*SLICE:urls*/?", "NULL", 1)
	}
	rows, err := q.db.QueryContext(ctx, query, queryParams...)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []BulkCountsByUrlsRow
	for rows.Next() {
		var i BulkCountsByUrlsRow
		if err := rows.Scan(&i.Url, &i.ViewCount, &i.LikeCount); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
