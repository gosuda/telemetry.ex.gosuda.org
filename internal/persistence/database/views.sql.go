// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: views.sql

package database

import (
	"context"
)

const urlInsert = `-- name: UrlInsert :exec
INSERT INTO urls (id, url, created_at)
VALUES (?, ?, ?)
`

type UrlInsertParams struct {
	ID        int64  `json:"id"`
	Url       string `json:"url"`
	CreatedAt int64  `json:"created_at"`
}

func (q *Queries) UrlInsert(ctx context.Context, arg UrlInsertParams) error {
	_, err := q.db.ExecContext(ctx, urlInsert, arg.ID, arg.Url, arg.CreatedAt)
	return err
}

const urlLookupByUrl = `-- name: UrlLookupByUrl :one
SELECT id, url, created_at FROM urls WHERE url = ?
`

func (q *Queries) UrlLookupByUrl(ctx context.Context, url string) (Url, error) {
	row := q.db.QueryRowContext(ctx, urlLookupByUrl, url)
	var i Url
	err := row.Scan(&i.ID, &i.Url, &i.CreatedAt)
	return i, err
}

const viewCountInsert = `-- name: ViewCountInsert :exec
INSERT INTO view_counts (id, url_id, count, updated_at)
VALUES (?, ?, 1, ?)
`

type ViewCountInsertParams struct {
	ID        int64 `json:"id"`
	UrlID     int64 `json:"url_id"`
	UpdatedAt int64 `json:"updated_at"`
}

func (q *Queries) ViewCountInsert(ctx context.Context, arg ViewCountInsertParams) error {
	_, err := q.db.ExecContext(ctx, viewCountInsert, arg.ID, arg.UrlID, arg.UpdatedAt)
	return err
}

const viewCountLookup = `-- name: ViewCountLookup :one
SELECT id, url_id, count, updated_at FROM view_counts WHERE url_id = ?
`

func (q *Queries) ViewCountLookup(ctx context.Context, urlID int64) (ViewCount, error) {
	row := q.db.QueryRowContext(ctx, viewCountLookup, urlID)
	var i ViewCount
	err := row.Scan(
		&i.ID,
		&i.UrlID,
		&i.Count,
		&i.UpdatedAt,
	)
	return i, err
}

const viewCountUpdate = `-- name: ViewCountUpdate :exec
UPDATE view_counts SET count = count + 1, updated_at = ? WHERE url_id = ?
`

type ViewCountUpdateParams struct {
	UpdatedAt int64 `json:"updated_at"`
	UrlID     int64 `json:"url_id"`
}

func (q *Queries) ViewCountUpdate(ctx context.Context, arg ViewCountUpdateParams) error {
	_, err := q.db.ExecContext(ctx, viewCountUpdate, arg.UpdatedAt, arg.UrlID)
	return err
}

const viewInsert = `-- name: ViewInsert :exec
INSERT INTO views (id, url_id, client_id, created_at)
VALUES (?, ?, ?, ?)
`

type ViewInsertParams struct {
	ID        int64 `json:"id"`
	UrlID     int64 `json:"url_id"`
	ClientID  int64 `json:"client_id"`
	CreatedAt int64 `json:"created_at"`
}

func (q *Queries) ViewInsert(ctx context.Context, arg ViewInsertParams) error {
	_, err := q.db.ExecContext(ctx, viewInsert,
		arg.ID,
		arg.UrlID,
		arg.ClientID,
		arg.CreatedAt,
	)
	return err
}
