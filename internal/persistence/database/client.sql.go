// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: client.sql

package database

import (
	"context"
)

const clientLookupByID = `-- name: ClientLookupByID :one
SELECT id, token, created_at
FROM client_identifiers
WHERE id = ?
`

func (q *Queries) ClientLookupByID(ctx context.Context, id int64) (ClientIdentifier, error) {
	row := q.db.QueryRowContext(ctx, clientLookupByID, id)
	var i ClientIdentifier
	err := row.Scan(&i.ID, &i.Token, &i.CreatedAt)
	return i, err
}

const clientLookupByToken = `-- name: ClientLookupByToken :one
SELECT id, token, created_at
FROM client_identifiers
WHERE token = ?
`

func (q *Queries) ClientLookupByToken(ctx context.Context, token string) (ClientIdentifier, error) {
	row := q.db.QueryRowContext(ctx, clientLookupByToken, token)
	var i ClientIdentifier
	err := row.Scan(&i.ID, &i.Token, &i.CreatedAt)
	return i, err
}

const clientRegisterFingerprint = `-- name: ClientRegisterFingerprint :exec
INSERT INTO client_fingerprints (id, client_id, user_agent, user_agent_data, fpversion, fphash, created_at)
VALUES (?, ?, ?, ?, ?, ?, ?)
`

type ClientRegisterFingerprintParams struct {
	ID            int64  `json:"id"`
	ClientID      int64  `json:"client_id"`
	UserAgent     string `json:"user_agent"`
	UserAgentData string `json:"user_agent_data"`
	Fpversion     int32  `json:"fpversion"`
	Fphash        string `json:"fphash"`
	CreatedAt     int64  `json:"created_at"`
}

func (q *Queries) ClientRegisterFingerprint(ctx context.Context, arg ClientRegisterFingerprintParams) error {
	_, err := q.db.ExecContext(ctx, clientRegisterFingerprint,
		arg.ID,
		arg.ClientID,
		arg.UserAgent,
		arg.UserAgentData,
		arg.Fpversion,
		arg.Fphash,
		arg.CreatedAt,
	)
	return err
}

const clientVerifyToken = `-- name: ClientVerifyToken :one
SELECT 1 FROM client_identifiers WHERE id = ? AND token = ?
`

type ClientVerifyTokenParams struct {
	ID    int64  `json:"id"`
	Token string `json:"token"`
}

func (q *Queries) ClientVerifyToken(ctx context.Context, arg ClientVerifyTokenParams) (int32, error) {
	row := q.db.QueryRowContext(ctx, clientVerifyToken, arg.ID, arg.Token)
	var column_1 int32
	err := row.Scan(&column_1)
	return column_1, err
}
