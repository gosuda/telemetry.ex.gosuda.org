// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: randflake.sql

package database

import (
	"context"
)

const randflakeGC = `-- name: RandflakeGC :exec
DELETE FROM randflake_leases WHERE expires_at < ?
`

func (q *Queries) RandflakeGC(ctx context.Context, expiresAt int64) error {
	_, err := q.db.ExecContext(ctx, randflakeGC, expiresAt)
	return err
}

const randflakeLeaseCreate = `-- name: RandflakeLeaseCreate :exec
INSERT INTO randflake_leases(uuid, node_id, created_at, expires_at)
VALUES (?, ?, ?, ?)
`

type RandflakeLeaseCreateParams struct {
	Uuid      []byte `json:"uuid"`
	NodeID    int64  `json:"node_id"`
	CreatedAt int64  `json:"created_at"`
	ExpiresAt int64  `json:"expires_at"`
}

func (q *Queries) RandflakeLeaseCreate(ctx context.Context, arg RandflakeLeaseCreateParams) error {
	_, err := q.db.ExecContext(ctx, randflakeLeaseCreate,
		arg.Uuid,
		arg.NodeID,
		arg.CreatedAt,
		arg.ExpiresAt,
	)
	return err
}

const randflakeLeaseExtend = `-- name: RandflakeLeaseExtend :exec
UPDATE randflake_leases SET expires_at = ? WHERE uuid = ?
`

type RandflakeLeaseExtendParams struct {
	ExpiresAt int64  `json:"expires_at"`
	Uuid      []byte `json:"uuid"`
}

func (q *Queries) RandflakeLeaseExtend(ctx context.Context, arg RandflakeLeaseExtendParams) error {
	_, err := q.db.ExecContext(ctx, randflakeLeaseExtend, arg.ExpiresAt, arg.Uuid)
	return err
}

const randflakeLeaseGet = `-- name: RandflakeLeaseGet :one
SELECT uuid, node_id, created_at, expires_at FROM randflake_leases WHERE uuid = ?
`

func (q *Queries) RandflakeLeaseGet(ctx context.Context, uuid []byte) (RandflakeLease, error) {
	row := q.db.QueryRowContext(ctx, randflakeLeaseGet, uuid)
	var i RandflakeLease
	err := row.Scan(
		&i.Uuid,
		&i.NodeID,
		&i.CreatedAt,
		&i.ExpiresAt,
	)
	return i, err
}
